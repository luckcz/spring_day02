<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">
	<!--准备工作：导入aop约束命名空间 -->
	<!-- 1.配置目标对象 -->
	<bean name = "userServiceTarget" class="com.kaicom.proxy.UserServiceImpl"></bean>
	<!-- 2.配置通知类 -->
	<bean name = "myAdvice" class="com.kaicom.springaop.MyAdvice"></bean>
	<!-- 3.将通知织入目标对象 -->
	<aop:config>
		<!-- 配置切入点 
			public void com.kaicom.proxy.UserServiceImpl.save()
			void com.kaicom.proxy.UserServiceImpl.save()
			* com.kaicom.proxy.UserServiceImpl.save()
			* com.kaicom.proxy.UserServiceImpl.*()
			最终形态
			* com.kaicom.proxy.*ServiceImpl.*(..) 只扫描proxy包下面的
			* com.kaicom.proxy..*ServiceImpl.*(..) 扫描proxy包下面的所有的包括子类包
		-->
		<aop:pointcut expression="execution(public void com.kaicom.proxy.UserServiceImpl.insert())" id="pc"/>
		<aop:aspect ref="myAdvice">
			<!-- 指定before方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pc"/>
			<aop:after-returning method="afterReturning" pointcut-ref="pc"/>
			<aop:around method="around" pointcut-ref="pc"/>
			<aop:after-throwing method="afterException" pointcut-ref="pc"/>
			<aop:after method="after" pointcut-ref="pc"/>
		</aop:aspect>
	</aop:config>
</beans>